***********************************************************************
* Creating the geometry and the mesh
***********************************************************************

* 3D model with tetrahedric linear elements
OPTI DIME 3 ELEM CU20;
* Save the mesh in a document called MESHING
OPTI SAUV meshing;

***********************************************************************
* GEOMETRY

* Fetch the size of the box in the parameters text file created
*               by EOM_integrate.init()

* Data in param.txt is stored as N \t Nm \t Nloops \t nu \t E
OPTI ACQU 'param.txt';
ACQU data*LISTREEL 5;
Np = ENTI 'PROC' (EXTR data 1);
Nz = ENTI 'PROC' (EXTR data 2);

* Number of segments per Side
Nm = ENTI 'PROC' (EXTR data 3);
SI ((Np - Nz) EGA 0);
Nmz = Nm;
SINON;
Nmz = 2;
FINSI;

* Average area on which one node sits
size = 1.0*Np/Nm;
area = size**2;

* lower face points
p0 = POIN 0 0 0;
p1 = POIN Np 0 0;
p2 = POIN Np Np 0;
p3 = POIN 0 Np 0;

* upper face points
p0u = POIN 0 0 Nz;
p1u = POIN Np 0 Nz;
p2u = POIN Np Np Nz;
p3u = POIN 0 Np Nz;

* Lower face edges
l01 = p0 DROI Nm p1;
l12 = p1 DROI Nm p2;
l23 = p2 DROI Nm p3;
l30 = p3 DROI Nm p0;

* upper face edges
l01u = p0u DROI Nm p1u;
l12u = p1u DROI Nm p2u;
l23u = p2u DROI Nm p3u;
l30u = p3u DROI Nm p0u;

* Vertical edges
l0v = p0 DROI Nmz p0u;
l1v = p1 DROI Nmz p1u;
l2v = p2 DROI Nmz p2u;
l3v = p3 DROI Nmz p3u;

* 6 faces of the cube
su1 = DALLER l01 l12 l23 l30;
su2 = DALLER l01u l12u l23u l30u;
su3 = DALLER l01 l1v l01u l0v;
su4 = DALLER l12 l2v l12u l1v;
su5 = DALLER l23 l3v l23u l2v;
su6 = DALLER l30 l0v l30u l3v;

* Mesh the interior of the closed surface
Ome = VOLU (su1 ET su2 ET su3 ET su4 ET su5 ET su6);

***********************************************************************
* Refinement:
* (No need for refinement yet)
OmeR = Ome;
* End refinement
***********************************************************************
* TRAC OmeR;

* The centre of mass:
pcent = POIN (Np/2.0) (Np/2.0) (Nz/2.0);
* Its coordinates
pcenx pceny pcenz = COOR pcent;

* Closest point to the centre of mass on the generated mesh
pclose = OmeR POIN 'PROC' pcent;
* Its coordinates
pcx pcy pcz = COOR pclose;

* The centre point is moved in the actual centre of mass of the cube
* DEPL 'PLUS' pclose ((pcenx - pcx) (pceny - pcy) (pcenz - pcz));

* Points created for fixing the rotation of the centre of mass
* Point (dx 0 0) if (0 0 0) is the position of the centre of mass
px = POIN ((Np/2.0) + (1.0*Np/Nm)) (Np/2.0) (Nz/2.0);
pclosx = OmeR POIN 'PROC' px;

* Point (0 dy 0) idem...
py = POIN (Np/2.0) ((Np/2.0) + (1.0*Np/Nm)) (Nm/2.0);
Pclosy = OmeR POIN 'PROC' py;

***********************************************************************
* Move the closest node onto the geometrical position of the loops
* end
***********************************************************************

* Point Mesh (For imposing balancing forces)
OmePoi = CHAN 'POI1' OmeR;

* Point mesh of the convex envelop of Omega
* (For imposing boundary conditions)
surfPoi = CHAN 'POI1' (ENVE OmeR);

* Let's create each surface of the cube
OPTI DENS 10;
surfb = OmeR POIN 'PLAN' p0 p1 p2;
surfu = OmeR POIN 'PLAN' p2u p3u p1u;
surfrb = OmeR POIN 'PLAN' p0 p1 p0u;
surfrf = OmeR POIN 'PLAN' p1 p2 p1u;
surflf = OmeR POIN 'PLAN' p2 p3 p3u;
surflb = OmeR POIN 'PLAN' p3 p0 p0u;

* Save the surface points in a document for python
* to compute the traction condition
OPTI 'IMPR' 42 'IMPR' 'surf.txt';
I = 0;
REPE elem (NBNO surfPoi);
I = I + 1;
X Y Z = COOR (surfPoi POIN I);
MESS I X Y Z;
FIN elem;

OPTI 'IMPR' 6;

* End geometry
***********************************************************************

* Save every the mesh:
SAUV OmeR;
SAUV Np;
SAUV Nz;
SAUV Nm;
SAUV area;

FIN;
