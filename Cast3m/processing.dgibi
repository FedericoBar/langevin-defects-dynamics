*****
* Processing the final data
*****

* Read the displacement from the solution.dgibi OUTPUT
OPTI REST dispCorr;
REST uCorr;

* Read the number of loops in the simulation
OPTI ACQU 'param.txt';
ACQU data*LISTREEL 6;
Nloops = ENTI 'PROC' (EXTR data 4);
Np = ENTI 'PROC' (EXTR data 1);
Nz = ENTI 'PROC' (EXTR data 2);

* Plot the displacement
TRAC uCorr OmeR;

* Compute the deformation
def0 = DEFO OmeR uCorr 0.;
defp = DEFO OmeR uCorr 'VERT';

* Plot the deformation
*TRAC (def0 ET defp);

* Compute the strain
epsCorr = EPSI mod1 uCorr;
* Compute the stress
sigCorr = SIGMA mod1 mat1 uCorr;

* What is the elastic energy density in the material?
Dener = ENER mod1 sigCorr epsCorr;
* Total elastic energy:
enerT = INTG mod1 Dener;

* Plot the stress in the material and on a plane containing the centre of mass
* Everytime it is important to check there are no stress concentration
* on the centre of mass.

TRAC sigCorr mod1;
TRAC sigCorr mod1 'SECT' pclose p0 p1;


* We make a CHPO for computing the gradient
epsChpo = CHAN 'CHPO' mod1 epsCorr;


* We change the components name to compute the gradient (in a mechanical model
* the gradient can be computed on a displacement only)
* So we have to vectors which coordinates are EPXX, EPYY, EPZZ
epsChpoA = EXCO (MOTS 'EPXX' 'EPYY' 'EPZZ') epsChpo (MOTS 'UX' 'UY' 'UZ');
* and GAXY, GAXZ, GAYZ.
epsChpoB = EXCO (MOTS 'GAXY' 'GAXZ' 'GAYZ') epsChpo (MOTS 'UX' 'UY' 'UZ');

* Now we compute the gradient of these two vectors.
gradEpsA = GRAD mod1 epsChpoA;
gradEpsB = GRAD mod1 epsChpoB;

* gradEpsA has the following form:
* [epsxx,x  epsxx,y  epsxx,z
*  epsyy,x  epsyy,y  epsyy,z
*  epszz,x  epszz,y  epszz,z]

* gradEpsB has the following form:
* [epsxy,x  epsxy,y  epsxy,z
*  epsxz,x  epsxz,y  epsxz,z
*  epsyz,x  epsyz,y  epsyz,z]


* Now we put them in the form:
* gradSA =
* [epsxx,s
*  epsyy,s
*  epszz,s]

* and gradSB =
* [epsxy,s
*  epsxz,s
*  epsyz,s]


gradXA = EXCO (MOTS 'UX,X' 'UY,X' 'UZ,X') gradEpsA (MOTS 'EXXX' 'EYYX' 'EZZX');
gradXB = EXCO (MOTS 'UX,X' 'UY,X' 'UZ,X') gradEpsB (MOTS 'EXYX' 'EXZX' 'EYZX');

gradYA = EXCO (MOTS 'UX,Y' 'UY,Y' 'UZ,Y') gradEpsA (MOTS 'EXXY' 'EYYY' 'EZZY');
gradYB = EXCO (MOTS 'UX,Y' 'UY,Y' 'UZ,Y') gradEpsB (MOTS 'EXYY' 'EXZY' 'EYZY');

gradZA = EXCO (MOTS 'UX,Z' 'UY,Z' 'UZ,Z') gradEpsA (MOTS 'EXXZ' 'EYYZ' 'EZZZ');
gradZB = EXCO (MOTS 'UX,Z' 'UY,Z' 'UZ,Z') gradEpsB (MOTS 'EXYZ' 'EXZZ' 'EYZZ');


* We change each element field in a point field
gradXA = CHAN 'NOEUD' mod1 gradXA;
gradXB = CHAN 'NOEUD' mod1 gradXB;
gradYA = CHAN 'NOEUD' mod1 gradYA;
gradYB = CHAN 'NOEUD' mod1 gradYB;
gradZA = CHAN 'NOEUD' mod1 gradZA;
gradZB = CHAN 'NOEUD' mod1 gradZB;

* Go and fetch the index of the loops
li = EXTE 'python ind_loops.py' 'RC';
lli = li.1;

* Compute the gradient on each geometrical point where there is a defect
ind = 2;
REPE elem (lli);
OmeM = OmeR;

nom = CHAINE 'simu/loop' li.ind 'pos.txt';
LIST nom;
OPTI ACQU nom;
ACQU pos*LISTREEL 3;

* Position of the dislocation loop
Rx = EXTR pos 1; Ry = EXTR pos 2; Rz = EXTR pos 3;
SI ((Rx < Np) ET (Ry < Np) ET (Rz < Nz) ET (Rx > 0) ET (Ry > 0) ET (Rz > 0));
pr = POIN Rx Ry Rz;

* Closest point to the defect:
pdef = OmeM POIN 'PROC' pr;
pdx pdy pdz = COOR pdef;

DEPL 'PLUS' pdef ((Rx - pdx) (Ry - pdy) (Rz - pdz));

* We fetch the all the derivatives we need in the point considered.
exx_xD = EXTR (PROI OmeM (EXCO gradXA 'EXXX')) 'EXXX' pdef;
eyy_xD = EXTR (PROI OmeM (EXCO gradXA 'EYYX')) 'EYYX' pdef;
ezz_xD = EXTR (PROI OmeM (EXCO gradXA 'EZZX')) 'EZZX' pdef;

exy_xD = EXTR (PROI OmeM (EXCO gradXB 'EXYX')) 'EXYX' pdef;
exz_xD = EXTR (PROI OmeM (EXCO gradXB 'EXZX')) 'EXZX' pdef;
eyz_xD = EXTR (PROI OmeM (EXCO gradXB 'EYZX')) 'EYZX' pdef;

* Derivative with respect to y

exx_yD = EXTR (PROI OmeM (EXCO gradYA 'EXXY')) 'EXXY' pdef;
eyy_yD = EXTR (PROI OmeM (EXCO gradYA 'EYYY')) 'EYYY' pdef;
ezz_yD = EXTR (PROI OmeM (EXCO gradYA 'EZZY')) 'EZZY' pdef;

exy_yD = EXTR (PROI OmeM (EXCO gradYB 'EXYY')) 'EXYY' pdef;
exz_yD = EXTR (PROI OmeM (EXCO gradYB 'EXZY')) 'EXZY' pdef;
eyz_yD = EXTR (PROI OmeM (EXCO gradYB 'EYZY')) 'EYZY' pdef;

* Derivative with respect to z

exx_zD = EXTR (PROI OmeM (EXCO gradZA 'EXXZ')) 'EXXZ' pdef;
eyy_zD = EXTR (PROI OmeM (EXCO gradZA 'EYYZ')) 'EYYZ' pdef;
ezz_zD = EXTR (PROI OmeM (EXCO gradZA 'EZZZ')) 'EZZZ' pdef;

exy_zD = EXTR (PROI OmeM (EXCO gradZB 'EXYZ')) 'EXYZ' pdef;
exz_zD = EXTR (PROI OmeM (EXCO gradZB 'EXZZ')) 'EXZZ' pdef;
eyz_zD = EXTR (PROI OmeM (EXCO gradZB 'EYZZ')) 'EYZZ' pdef;


* We print out all the 18 values we need in a file (Except for the loops
* no longer in the box)
* named Dstrain.txt in the cast3m folder
nomImpr = CHAINE 'Dstrain' li.ind '.txt';

OPTI 'IMPR' 42 'IMPR' nomImpr;

LIST (exx_xD ET eyy_xD ET ezz_xD ET exy_xD ET exz_xD ET eyz_xD);
LIST (exx_yD ET eyy_yD ET ezz_yD ET exy_yD ET exz_yD ET eyz_yD);
LIST (exx_zD ET eyy_zD ET ezz_zD ET exy_zD ET exz_zD ET eyz_zD);

ind = ind + 1;
FINSI;
FIN elem;

LIST enerT;

OPTI 'IMPR' 6;

FIN;
